import os
import logging
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Dict, Any, List, Optional
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class AlertNotifier:
    """Sends notifications for detected crises"""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # Email configuration
        self.email_enabled = os.getenv("EMAIL_ALERTS_ENABLED", "false").lower() == "true"
        self.email_from = os.getenv("EMAIL_FROM", "")
        self.email_to = os.getenv("EMAIL_TO", "").split(",")
        self.email_subject_prefix = os.getenv("EMAIL_SUBJECT_PREFIX", "[BRAND ALERT]")
        
        # SMTP configuration
        self.smtp_server = os.getenv("SMTP_SERVER", "")
        self.smtp_port = int(os.getenv("SMTP_PORT", "587"))
        self.smtp_username = os.getenv("SMTP_USERNAME", "")
        self.smtp_password = os.getenv("SMTP_PASSWORD", "")
        self.smtp_use_tls = os.getenv("SMTP_USE_TLS", "true").lower() == "true"
    
    def send_alert(self, crisis: Dict[str, Any]) -> bool:
        """Send alert notification for a crisis
        
        Args:
            crisis: Crisis information
            
        Returns:
            True if alert was sent successfully, False otherwise
        """
        self.logger.info(f"Sending alert for {crisis['brand']}: {crisis['description']}")
        
        # Format alert message
        message = self._format_alert_message(crisis)
        
        # Send email alert if enabled
        if self.email_enabled:
            return self._send_email_alert(crisis, message)
        
        # Log alert if email is not enabled
        self.logger.info(f"Email alerts not enabled. Alert message: {message}")
        return True
    
    def send_batch_alerts(self, crises: List[Dict[str, Any]]) -> Dict[str, int]:
        """Send batch alerts for multiple crises
        
        Args:
            crises: List of crisis information
            
        Returns:
            Dictionary with count of successful and failed alerts
        """
        results = {"success": 0, "failed": 0}
        
        for crisis in crises:
            if self.send_alert(crisis):
                results["success"] += 1
            else:
                results["failed"] += 1
        
        return results
    
    def _format_alert_message(self, crisis: Dict[str, Any]) -> str:
        """Format alert message
        
        Args:
            crisis: Crisis information
            
        Returns:
            Formatted alert message
        """
        severity_text = self._get_severity_text(crisis["severity"])
        
        message = f"""
BRAND CRISIS ALERT

Brand: {crisis['brand']}
Severity: {severity_text} ({crisis['severity']:.2f})
Detected: {crisis['detected_at'].strftime('%Y-%m-%d %H:%M:%S')}

{crisis['description']}

This alert was automatically generated by the Social Media Brand Monitoring System.
"""
        return message
    
    def _get_severity_text(self, severity: float) -> str:
        """Get text representation of severity
        
        Args:
            severity: Severity score (0-1)
            
        Returns:
            Text representation of severity
        """
        if severity >= 0.8:
            return "CRITICAL"
        elif severity >= 0.6:
            return "HIGH"
        elif severity >= 0.4:
            return "MEDIUM"
        else:
            return "LOW"
    
    def _send_email_alert(self, crisis: Dict[str, Any], message: str) -> bool:
        """Send email alert
        
        Args:
            crisis: Crisis information
            message: Alert message
            
        Returns:
            True if email was sent successfully, False otherwise
        """
        if not self.smtp_server or not self.email_from or not self.email_to:
            self.logger.error("Email configuration incomplete")
            return False
        
        try:
            # Create message
            email = MIMEMultipart()
            email["From"] = self.email_from
            email["To"] = ", ".join(self.email_to)
            
            # Create subject with severity indicator
            severity_text = self._get_severity_text(crisis["severity"])
            email["Subject"] = f"{self.email_subject_prefix} {severity_text}: {crisis['brand']}"
            
            # Attach message
            email.attach(MIMEText(message, "plain"))
            
            # Connect to SMTP server
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                if self.smtp_use_tls:
                    server.starttls()
                
                if self.smtp_username and self.smtp_password:
                    server.login(self.smtp_username, self.smtp_password)
                
                # Send email
                server.send_message(email)
            
            self.logger.info(f"Email alert sent for {crisis['brand']}")
            return True
        
        except Exception as e:
            self.logger.error(f"Error sending email alert: {str(e)}")
            return False